import java.util.regex.Pattern

apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.example.nanhu.nhandroidpro"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    signingConfigs { //gradle assembleRelease
        release {
            storeFile file('../../NHBuildConfig/signs/test.jks')
            storePassword "123456"
            keyAlias "test"
            keyPassword "123456"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            jniDebuggable false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    /*
    // 通过获取commit提交次数生成version code
    def getVersionCode = { ->
        try {
            def  stdout = new ByteArrayOutputStream()
            exec {
                // 返回当前所在分支的提交总数。
                commandLine 'git', 'rev-list', '--first-parent', '--count', "HEAD"
                standardOutput = stdout
            }

            //+300是因为与之前的版本命名区分开，不会与之前的重复
            println("==================build code!" + Integer.parseInt(stdout.toString().trim()))
            return Integer.parseInt(stdout.toString().trim())
        } catch (ignored) {
            println("==================error code!");
            return -1;
        }
    }

    defaultConfig {
        multiDexEnabled true
        applicationId = "com.hzflk.mixintong"

        versionCode getVersionCode()
        versionName "5.0.0"
    }
    */
    //handle build version code
    def manifestFile = file('AndroidManifest.xml')
    if (manifestFile.canRead()) {
        def patternVersionCode = Pattern.compile("versionCode=\"(\\d+)\"")
        def manifestText = manifestFile.getText()
        def matcherVersionCode = patternVersionCode.matcher(manifestText)
        matcherVersionCode.find()
        def mVersionCode = Integer.parseInt(matcherVersionCode.group(1))
        def mNextVersionCode = mVersionCode + 1
        def manifestContent = matcherVersionCode.replaceAll("versionCode=\"" + mNextVersionCode + "\"")
        println(":incrementVersionCode - current versionCode=" + mVersionCode);
        println(":incrementVersionCode - next versionCode=" + mNextVersionCode);
        manifestFile.write(manifestContent)
        
        defaultConfig {
            multiDexEnabled true
            applicationId = "com.hzflk.mixintong"

            versionCode mNextVersionCode
            versionName "5.0.0"
        }
    }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:design:23.1.1'
}

import java.util.regex.Pattern

apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.example.nanhu.nhandroidpro"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    signingConfigs { //gradle assembleRelease
        release {
            storeFile file('../../NHBuildConfig/signs/test.jks')
            storePassword "123456"
            keyAlias "test"
            keyPassword "123456"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            jniDebuggable false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

task increaseVersionCode << {
    //println(":incrementVersionCode - Incrementing Version Code...")
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionCode = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcherVersionCode = patternVersionCode.matcher(manifestText)
    matcherVersionCode.find()
    def mVersionCode = Integer.parseInt(matcherVersionCode.group(1))
    def mNextVersionCode = mVersionCode + 1
    def manifestContent = matcherVersionCode.replaceAll("versionCode=\"" + mNextVersionCode + "\"")
    println(":incrementVersionCode - current versionCode=" + mVersionCode);
    println(":incrementVersionCode - next versionCode=" + mNextVersionCode);
    manifestFile.write(manifestContent)
}

/*
task incrementVersionName << {
        println(":incrementVersionName - Incrementing Version Name...")
        def manifestFile = file("src/main/AndroidManifest.xml")
        def patternVersionNumber = Pattern.compile("versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)\"")
        def manifestText = manifestFile.getText()
        def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
        matcherVersionNumber.find()
        def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
        def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
        def pointVersion = Integer.parseInt(matcherVersionNumber.group(3))
        def mVersionName = majorVersion + "." + minorVersion + "." + pointVersion
        def mNextVersionName = majorVersion + "." + minorVersion + "." + (pointVersion + 1)
        def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
        println(":incrementVersionName - current versionName=" + mVersionName);
        println(":incrementVersionName - new versionName=" + mNextVersionName);
        manifestFile.write(manifestContent)
}
*/

task release << {
    println(":release - Build and Version Increment")
}

task debug << {
    println(":debug - Build")
}

tasks.whenTaskAdded { task ->
    if (task.name == 'generateReleaseBuildConfig' || task.name == 'generateDebugBuildConfig') {
        task.dependsOn 'increaseVersionCode'
        //task.dependsOn 'incrementVersionName'
    }
}

//incrementVersionName.mustRunAfter build
//increaseVersionCode.mustRunAfter build

//debug.dependsOn assembleDebug
// Uncomment if you want to increment the versionCode and/or versionName when using the debug build
//debug.dependsOn incrementVersionCode
//debug.dependsOn incrementVersionName

release.dependsOn assembleRelease
release.dependsOn increaseVersionCode
//release.dependsOn incrementVersionName
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:design:23.1.1'
}
